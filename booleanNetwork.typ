#import "libs/rsj-conf/lib.typ": rsj-conf
#show: rsj-conf.with(
  title: [人工知能レポート２], 
  authors: [森田　知颯（03240454）],
  bibliography: bibliography("refs.yml", full: false)
)

#import "@preview/sourcerer:0.2.1": code
#show link: underline
#import "@preview/codelst:2.0.1": sourcecode

課題は、第８問を選択した。
= 概要
本課題においては、ブーリアンネットワークを構成し、ノード数（2進数の桁の数）、ノードの入次数、コンスタント関数の有無、ブール関数の構成時の1の確率をそれぞれ変えて計算し、リミットサイクルの長さ、点アトラクタの数を比較し、生命と脳のモデルとしての可能性「カオスの縁」について考察する。

= 方法
== ブーリアンネットワークについて
各ノードには0と1の値が入り、他のノードを入力とし、ブール関数によって次の状態が決められる。状態の更新は、同期的に行われる。各ノードの値を連ねた2進数をラベルとして、ネットワークの状態と定義し、その状態の遷移は一意に決まる。その状態の遷移は有向グラフとして表され、その時のループがアトラクタと呼ばれ、初期状態はすべてそれらアトラクタに吸い寄せられるように状態が遷移していく。そのときのループの長さをリミットサイクルの長さと定義し、リミットサイクルの長さが1つまり、状態が一つの状態に定まる場合は点アトラクタと呼ばれる。ブール関数の入力のある引数の否定を引数とするブール関数の出現する確率と元のブール関数の出現する確率が同じである場合、点アトラクタの数の平均は1になるということが知られている@point_attractor 。本実験においては、論理式の中身は気にせず、直接出力を確立に従って決めるため、定理の条件を満たしているため、点アトラクタの数の平均は1となるはずである。これについても検証する。

== ブーリアンネットワークのパラメータ
本課題では、ノード数、ノードの入次数、コンスタント関数の存在を許すかどうか（有りとした場合に必ずコンスタント関数がふくまれるわけではない）、ブール関数の構成時の1の確率をそれぞれ変えて計算し、リミットサイクルの長さ、点アトラクタの数を比較する。コンスタント関数とは、ブール関数の一種で入力のいずれでも、出力が全て0あるいは1になるものである。

出力が0と1である確率が等しい場合と等しくない場合の2つの場合について実験を行った。前者ではノード数と入次数とコンスタント関数の有無のすべての組み合わせで行い、後者についてはノード数4で固定し、入次数とコンスタント関数の有無を変えて実験を行った。

実験は100回繰り返し行い、各々特徴量について平均や標準偏差等を求め、グラフにまとめた。
== 使用するコードについて
```bash
python PBN.py
```
#figure(
    placement: bottom,
    caption: [PBN.pyのGUI],
    
    image("figs/gui.png")
)<fig:gui>
によって@fig:gui のような画面が開くため各パラメータを入力することで、シミュレーションを行われる。アトラクターの数、点アトラクターの数、リミットサイクルの長さがjsonファイルとして出力される。
実行には、python3の標準モジュール、matplotlib、tkinter、networkxのインストールが必要である。
\ \ \ \ \
= 結果
== ブール関数の出力が1と0である確率が等しい場合
=== リミットサイクルの長さ
それぞれの実験において、ノードの数、ノードの入次数、コンスタント関数の有無を変えブール関数の構成時の1の確率を0.5に固定して計算し、出現したリミットサイクルを求めた。リミットサイクルの長さの平均を@fig:limitcycle に示す。エラーバーは平均の1σの範囲を示している。また、リミットサイクルの長さの箱ひげ図を@fig:limitcycle_box に示す。
横軸については、d（入次数）.c（コンスタント関数の有無）たとえばd2.c0は入次数2、コンスタント関数がない場合であることを示している。

入次数が大きければ大きいほど、または、ノードの数が大きいければ大きいほど、リミットサイクルの長さは長くなるということが言えそうである。具体的にノード数4と7のd4.c0（入次数4、コンスタント関数なし）を比べると、平均1回ほどリミットサイクルが長いことがわかる。また、コンスタント関数がある場合もない場合も、リミットサイクルの長さが変わるとは言えないことがわかる。

#figure(
    placement: top,
    caption: [リミットサイクルの長さの平均(確率が0.5の場合)],
    
    image("figs/attractor_average_size.png")
)<fig:limitcycle>
#figure(
    placement: top,
    caption: [リミットサイクルの長さ・箱ひげ図(確率が0.5の場合)],
    image("figs/attractor_average_size_box.png")
)<fig:limitcycle_box>
=== アトラクタの数
アトラクタの数の平均を@fig:attractor_num に示す。エラーバーは平均の1σの範囲を示している。

入次数3, 4の場合はそれほど大きな違いは見られないが、入次数2の場合は、少しだけアトラクタの数の平均が3, 4の時と比べて、どのノード数の場合でも0.5ほど小さくなっていることがわかる。

コンスタント関数の有無での違いは、それほど大きくなく、少なくとも、本課題において有意差は認められない。
#figure(
    placement: top,
    caption: [アトラクタの数(確率が0.5の場合)],
    image("figs/attractor_num.png")
)<fig:attractor_num>
\
=== 点アトラクタの数
点アトラクタの数の平均を@fig:point_attractor に示す。エラーバーは平均の1σの範囲を示している。@point_attractor が示す条件を満たしているため、点アトラクタの数の平均は1になっていると言えると考えられる。中心極限定理より、エラーバー内に平均が収まる確率は約68%であるため、一部1の範囲外にエラーバーが出ているが、これは妥当な結果と言える。

点アトラクタの数の平均は、ノード数、入次数、コンスタント関数の有無には依存しないことがわかる。
#figure(
    placement: top,
    caption: [点アトラクタの数(確率が0.5の場合)],
    image("figs/point_attractor.png")
)<fig:point_attractor>
== ブール関数の出力が1と0である確率が等しくない場合
=== リミットサイクルの長さ
リミットサイクルの長さについて@fig:limitcycle_bar_prob に示す。
入次数が多ければ多いほどリミットサイクルが長くなるという傾向は、確率を変えても変わらず、入次数やコンスタント関数の有無にかかわらず、確率が0.5である場合が最もリミットサイクルの長さが長くなる傾向があることがわかる。0.3と0.7, 0.1と0.9については、対称性から予想できる通り、リミットサイクルは等しくなるが、どちらかに出力が偏る場合、リミットサイクルの長さは短くなることがわかる。
#figure(
    placement: top,
    caption: [リミットサイクルの長さ（確率が異なる場合）],
    image("figs/limitcycle_bar_prob.png")
)<fig:limitcycle_bar_prob>
=== アトラクタの数
アトラクタの数の平均の結果を@fig:attractor_num_prob に示す。リミットサイクルの長さと同様に確率が0.5の場合が最もアトラクタの数が多くなる傾向があることがわかる。0.3と0.7, 0.1と0.9についても、同じく対称性から予想できる通り、アトラクタの数は等しくなる。
#figure(
    placement:top,
    caption: [アトラクタの数（確率が異なる場合）],
    image("figs/attractor_num_prob.png")
)<fig:attractor_num_prob>
=== 点アトラクタの数
点アトラクタの数の平均の結果を@fig:point_attractor_prob に示す。@point_attractor が示すとおりに、点アトラクタの数の平均は1になっていると言える。以上より、入次数、コンスタント関数の有無、ブール関数の出力が1となる確率に依存しないということが検証できた。
#figure(
    placement:top,
    caption: [点アトラクタの数（確率が異なる場合）],
    image("figs/point_attractor_prob.png")
)<fig:point_attractor_prob>
\ \
= 考察
== リミットサイクルの長さ
リミットサイクルの長さについては、@fig:limitcycle と@fig:limitcycle_box を見ると、分布は右に裾を引くような分布になっていると考えられる。また、@fig:limitcycle のエラーバーの10倍し、2乗したものが実験地の分散となり、平均と似たような値になっていることから、おおむねポアソン分布に従うと言える。

また、出力が1になる確率については、0.5でない場合は、1か0のどちらかにノードの値が偏るため、より値が固定されやすくなり、リミットサイクルの長さは短くなるという説明が妥当であると考えられる。

細胞へのアナロジーとしては、1を活性している状態とし、0が非活性であるとすると、そのリミットサイクルの長さは、細胞の活性と非活性の周期的な変化の長さに対応すると考えられる。

ニューロンの周期的な活動に関しては恐怖にも関連がある@shuki 。その周期の長さと細胞の活動の関係は明瞭ではないが、実際に生命に見られる活動をおおまかに模倣することができる。
== アトラクタの数
アトラクタの数については、状態の数が指数関数的に増加しても、あまり大きくならないことがわかる。初期状態がいずれにしても行き着く状態は大抵一つに決まっていることを表している。と考えられる。

ブール関数の出力を確率で変えると、より決まった状態に落ち着くことがわかる。@fig:graph0 は1が出力される確率が90%となっている場合で、このように1111に収束している場合が多かった。逆に確率が10%の場合は、0000に収束する場合が多い。
#figure(
    placement: bottom,
    caption: [確率が偏っている場合の例],
    image("figs/graph0.png", width: 70%)
)<fig:graph0>

細胞のモデルとして、アトラクタを細胞の落ち着く先の状態とみなせば、アトラクタの数は多様性を表すと考えられる。ノードの数値の突然変異によって、アトラクタが移るということも考えられ、これは細胞の突然変異あるいは進化に対応すると考えられる。

== 点アトラクタの数
改めて@fig:point_attractor の検証ができた。トポロジーをランダムに決めていることから、関数はそれぞれ確率的に中立であるという条件が成立し、点アトラクタの平均は1になった。

点アトラクタについては、ループして周期的に安定な状態よりもさらに安定で、完全に状態を変えていない。細胞に関して言えば、一定のすべての細胞が安定している状態であると言える。

@point_attractor によると、ポジティブフィードバックが多い場合は、点アトラクタの数の平均は1より大きく、ネガティブフィードバックが多い場合は、点アトラクタの数の平均は1より小さくなるという。ポジティブフィードバックは、細胞の活性すると、巡ってさらに自分自身を活性させるというものと考えると、細胞の状態をある程度固定しているという解釈ができ、それ故に点アトラクタの数は大きくなるという事実にある程度合致していると考えられる。逆にネガティブフィードバックでは、抑制がかかり、自身が活性化したら、非活性化するようになり、非活性かすると、活性化するように働きかけが起きるため、アトラクタは点にはならないという事実に合致すると考えられる。

== モデルとしてのブーリアンネットワーク
以上より、ある程度細胞やニューロンのモデルとして、ブーリアンネットワークはその共通点から成立すると考えられる。ブーリアンネットワークでの実験の結果が実際の細胞やニューロンの活動としても成立するならば、細胞の数が多ければ多いほど、また細胞の連結が多ければ多いほど、多様なアトラクタすなわち状態が存在するということになる。

カオスの縁の生命の議論と照らし合わせると、生物の条件として恒常性が挙げられるため、安定し秩序的な側面があるというのはもっともで、同時に進化論として考えると、アトラクタの数が複数あって、突然変異によってアトラクタ間の状態の移動がないと、進化が起きずに、環境の変化に適応できないということが考えられる。よってアトラクタの数が複数あるというカオス的な側面もあると考えられる。

モデルとしてブーリアンネットワークは、秩序とカオスの両方を観測でき、細胞で見られる現象もある程度検証できるため、生命はカオスの縁で発展してきたという議論の一部検証を行えると考えられる。具体的には、生命の恒常性はどの経路をたどって安定化したかということと突然変異等でアトラクタ間を移動することによって、どのように別の形質を持つ生物へと進化したかについての検証ができるかもしれない。

しかしながら、現実の細胞等との相違点は無視できない。本実験では、同期的にノードの状態を変えていったが、現実は非同期的なものが多く、さらには細胞の状態は0と1の二通りで表されるものではない。また、アトラクタはノードとそれが持つブール関数で決定的に定まるが、それが細胞等生命のモデルとして当てはまるなら、細胞の状態とその外部からの刺激に対する反応によって、安定状態は決定しているということになる。ラプラスの悪魔の否定と同じく、細胞の状態をすべて記述することは不可能であり、安定状態をこれを用いて探し、次なる生命の行きつく先を考えるモデルとしては不十分であると言える。


